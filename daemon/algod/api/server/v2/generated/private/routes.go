// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BwAA//8X37/R/qcAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
