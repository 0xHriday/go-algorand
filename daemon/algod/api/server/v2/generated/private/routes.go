// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by id
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info by id
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"r+t9xtH65tPN/w8AAP//ZD6/o3ShAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
