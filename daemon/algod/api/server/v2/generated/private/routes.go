// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
