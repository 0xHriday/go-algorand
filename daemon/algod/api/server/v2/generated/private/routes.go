// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by id
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info by id
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
