// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by id
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info by id
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
