// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get a Merkle proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetProof(ctx echo.Context, round uint64, txid string, params GetProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProofParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET("/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET("/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET("/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET("/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET("/v2/blocks/:round/transactions/:txid/proof", wrapper.GetProof, m...)
	router.GET("/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET("/v2/status", wrapper.GetStatus, m...)
	router.GET("/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST("/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST("/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.POST("/v2/transactions", wrapper.RawTransaction, m...)
	router.GET("/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET("/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET("/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
